-# Code Quality & Documentation
- Write up-to-date, fantastic code that runs on the first try.
- Reference official documentation for every library (e.g., React, Node, etc.) to ensure compatibility and reliability.
- Triple-check all code changes before merging.
- Lint everything rigorously; no unused references allowed.
- Each function must be less than 50 lines for clarity and maintainability.
- Enforce comments on every function to explain intent and logic.

-# Problem Analysis & Logging
- Before implementing any code fix, research and reflect on 5-7 potential sources of the issue (e.g., library version mismatches, API deprecations, improper linting, unintended side effects, incomplete unit tests, configuration errors, or environmental differences).
- Distill these possibilities down to the 1-2 most likely causes.
- Add detailed logs to validate these assumptions before applying the actual code fix.
- Log key diagnostic messages at each critical step to help trace execution paths.

-# Testing & Code Review
- Include unit tests for all new functions and modifications.
- Perform AI code reviews using Graphite, Code Rabbit, Qodo, and consider Korbit/Bito.
- Emphasize that “your AI code breaks, you own it”—fix issues promptly and transparently.

-# PR Documentation & Diagrams
- Every pull request must include a Mermaid diagram outlining the system or feature flow.
- Document how each change aligns with the Adaptive Chat UI’s biophilic design principles and enhanced understanding framework.
- Describe the integration of intention detection, entity recognition, and adaptive UI components.

-# Integration with Project PRD
- Ensure the code adheres to the core objectives: responsive UI, biophilic design, enhanced interaction tracking, and accessibility standards (WCAG 2.1 AA compliance).
- Keep design elements consistent with the PRD (e.g., color palette, typography, and organic UI elements).